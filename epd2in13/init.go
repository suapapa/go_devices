// Copyright 2019, Homin Lee <homin.lee@suapapa.net>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package epd2in13

var (
	epd2in13LutFullUpdate = []byte{
		0x80, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, //LUT0: BB:     VS 0 ~7
		0x10, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, //LUT1: BW:     VS 0 ~7
		0x80, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, //LUT2: WB:     VS 0 ~7
		0x10, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, //LUT3: WW:     VS 0 ~7
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //LUT4: VCOM:   VS 0 ~7

		0x03, 0x03, 0x00, 0x00, 0x02, // TP0 A~D RP0
		0x09, 0x09, 0x00, 0x00, 0x02, // TP1 A~D RP1
		0x03, 0x03, 0x00, 0x00, 0x02, // TP2 A~D RP2
		0x00, 0x00, 0x00, 0x00, 0x00, // TP3 A~D RP3
		0x00, 0x00, 0x00, 0x00, 0x00, // TP4 A~D RP4
		0x00, 0x00, 0x00, 0x00, 0x00, // TP5 A~D RP5
		0x00, 0x00, 0x00, 0x00, 0x00, // TP6 A~D RP6

		0x15, 0x41, 0xA8, 0x32, 0x30, 0x0A,
	}

	epd2in13LutPartUpdate = []byte{ // 20 bytes
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //LUT0: BB:     VS 0 ~7
		0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //LUT1: BW:     VS 0 ~7
		0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //LUT2: WB:     VS 0 ~7
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //LUT3: WW:     VS 0 ~7
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //LUT4: VCOM:   VS 0 ~7

		0x0A, 0x00, 0x00, 0x00, 0x00, // TP0 A~D RP0
		0x00, 0x00, 0x00, 0x00, 0x00, // TP1 A~D RP1
		0x00, 0x00, 0x00, 0x00, 0x00, // TP2 A~D RP2
		0x00, 0x00, 0x00, 0x00, 0x00, // TP3 A~D RP3
		0x00, 0x00, 0x00, 0x00, 0x00, // TP4 A~D RP4
		0x00, 0x00, 0x00, 0x00, 0x00, // TP5 A~D RP5
		0x00, 0x00, 0x00, 0x00, 0x00, // TP6 A~D RP6

		0x15, 0x41, 0xA8, 0x32, 0x30, 0x0A,
	}
)

// InitFull initialize in full mode
func (d *Display) InitFull() {
	d.waitTillNotBusy()
	d.sendCmd(0x12) // soft reset
	d.waitTillNotBusy()

	d.sendCmd(0x74) //set analog block control
	d.sendData(0x54)
	d.sendCmd(0x7E) //set digital block control
	d.sendData(0x3B)

	d.sendCmd(0x01) //Driver output control
	d.sendData(0xF9)
	d.sendData(0x00)
	d.sendData(0x00)

	d.sendCmd(0x11) //data entry mode
	d.sendData(0x01)

	d.sendCmd(0x44) //set Ram-X address start/end position
	d.sendData(0x00)
	d.sendData(0x0F) //0x0C-->(15+1)*8=128

	d.sendCmd(0x45)  //set Ram-Y address start/end position
	d.sendData(0xF9) //0xF9-->(249+1)=250
	d.sendData(0x00)
	d.sendData(0x00)
	d.sendData(0x00)

	d.sendCmd(0x3C) //BorderWavefrom
	d.sendData(0x03)

	d.sendCmd(0x2C)  //VCOM Voltage
	d.sendData(0x55) //

	d.sendCmd(0x03)
	d.sendData(epd2in13LutFullUpdate[70])

	d.sendCmd(0x04) //
	d.sendData(epd2in13LutFullUpdate[71])
	d.sendData(epd2in13LutFullUpdate[72])
	d.sendData(epd2in13LutFullUpdate[73])

	d.sendCmd(0x3A) //Dummy Line
	d.sendData(epd2in13LutFullUpdate[74])
	d.sendCmd(0x3B) //Gate time
	d.sendData(epd2in13LutFullUpdate[75])

	d.sendCmd(0x32)
	for i := 0; i < 70; i++ {
		d.sendData(epd2in13LutFullUpdate[i])
	}

	d.sendCmd(0x4E) // set RAM x address count to 0
	d.sendData(0x00)
	d.sendCmd(0x4F) // set RAM y address count to 0X127
	d.sendData(0xF9)
	d.sendData(0x00)
	d.waitTillNotBusy()
}

// InitPart initialize in part mode
func (d *Display) InitPart() {
	d.sendCmd(0x2C) //VCOM Voltage
	d.sendData(0x26)

	d.waitTillNotBusy()

	d.sendCmd(0x32)
	for i := 0; i < 70; i++ {
		d.sendData(epd2in13LutPartUpdate[i])
	}

	d.sendCmd(0x37)
	d.sendData(0x00)
	d.sendData(0x00)
	d.sendData(0x00)
	d.sendData(0x00)
	d.sendData(0x40)
	d.sendData(0x00)
	d.sendData(0x00)

	d.sendCmd(0x22)
	d.sendData(0xC0)
	d.sendCmd(0x20)
	d.waitTillNotBusy()

	d.sendCmd(0x3C) //BorderWavefrom
	d.sendData(0x01)
}
